// 投稿データの型定義
export interface Post {
  id: number;
  title: string;
  slug: string;
  content: string;
}

// サンプルのブログ記事データ（9件・長文・改行追加）
export const posts: Post[] = [
  {
    id: 1,
    title: "Hello World!",
    slug: "hello-world",
    content:
      "Hello World! この投稿は、ブログアプリケーションの最初の投稿です。\n\n" +
      "これからさまざまな技術記事を投稿していく予定です。\n\n" +
      "Next.js や Tailwind CSS などのフレームワークを活用して、\nモダンなウェブアプリケーションを開発する方法を学んでいきます。\n\n" +
      "ぜひこのブログをブックマークして、最新の情報をチェックしてください！",
  },
  {
    id: 2,
    title: "Next.jsの魅力と詳細",
    slug: "nextjs-details",
    content:
      "Next.jsは、Reactをベースにしたフレームワークであり、\n" +
      "サーバーサイドレンダリング（SSR）や静的サイト生成（SSG）を活用できる強力なツールです。\n\n" +
      "サーバー側でページを生成することでSEOに強く、高速なパフォーマンスを実現できます。\n" +
      "また、`next/image` などのビルトインコンポーネントを活用することで、\n" +
      "画像の最適化も簡単に行えます。\n\n" +
      "最新のバージョンでは App Router が導入され、\nAPI Routesの管理も柔軟に行えるようになりました。\n\n" +
      "さらに、Vercelとの相性が抜群で、簡単にデプロイできるのも大きな魅力です。",
  },
  {
    id: 3,
    title: "Next.js勉強記録",
    slug: "nextjs-study",
    content:
      "このブログでは、Next.jsの学習を進める過程を記録しています。\n\n" +
      "初めてNext.jsを使う人のために、環境構築からデプロイまでの流れを詳しく解説します。\n\n" +
      "また、実際にプロジェクトを作りながら、動的ルーティングやAPI Routesの活用方法について学んでいきます。\n" +
      "Tailwind CSSを組み合わせることで、スタイリングを効率的に行う方法も紹介します。\n\n" +
      "学習の進捗やハマったポイントも随時共有していくので、ぜひ参考にしてください。",
  },
  {
    id: 4,
    title: "Reactの基礎とコンポーネント設計",
    slug: "react-basics",
    content:
      "Reactは、コンポーネントベースのライブラリであり、\n再利用可能なUIを作成するために最適なツールです。\n\n" +
      "本記事では、Reactの基本概念であるコンポーネント、プロップス、ステートについて解説します。\n" +
      "また、コンポーネントを適切に分割することで、\nメンテナンスしやすいコードを実現する方法についても説明します。\n\n" +
      "クラスコンポーネントと関数コンポーネントの違いや、\n最新のReact Hooksを活用した状態管理の方法にも触れていきます。",
  },
  {
    id: 5,
    title: "Tailwind CSSでスタイリングを効率化",
    slug: "tailwind-css",
    content:
      "Tailwind CSSは、ユーティリティファーストのCSSフレームワークであり、\n従来のCSSやSCSSのスタイリング方法とは異なるアプローチを取ります。\n\n" +
      "クラスを組み合わせてスタイルを定義することで、\nスタイルの一貫性を保ちつつ、カスタマイズの自由度を高めることができます。\n" +
      "また、JIT（Just-In-Time）モードにより、\n使用するクラスのみをビルド時に生成し、パフォーマンスの向上も期待できます。\n\n" +
      "Tailwindを使うことで、デザインの統一感を保ちながら、効率的なスタイリングが可能になります。",
  },
  {
    id: 6,
    title: "REST API vs GraphQL: どちらを選ぶべきか",
    slug: "rest-vs-graphql",
    content:
      "REST APIとGraphQLは、フロントエンドとバックエンド間でデータをやり取りするためのアプローチですが、それぞれの特性が異なります。\n\n" +
      "RESTはシンプルで広く普及しており、キャッシュ管理も容易です。\n" +
      "一方、GraphQLはクライアント側が必要なデータを柔軟に取得でき、リクエスト回数を減らすことができます。\n\n" +
      "しかし、GraphQLはセットアップがやや複雑で、パフォーマンスの最適化が求められる場面もあります。\n" +
      "プロジェクトの要件に応じて、適切なAPI設計を選択することが重要です。",
  },
  {
    id: 7,
    title: "Vercelを使ったNext.jsアプリのデプロイ",
    slug: "deploy-nextjs-vercel",
    content:
      "Vercelは、Next.jsに最適化されたホスティングサービスであり、GitHubと連携することで簡単にデプロイが可能です。\n\n" +
      "`git push` するだけで自動的にビルドとデプロイが行われ、プレビュー環境も自動生成されるため、開発効率が向上します。\n\n" +
      "また、環境変数の管理やカスタムドメイン設定も容易であり、無料プランでも高性能なホスティングが利用できます。\n\n" +
      "本記事では、Vercelでのデプロイ手順を解説します。",
  },
  {
    id: 8,
    title: "SEO対策: Next.jsで最適なメタデータを設定する",
    slug: "nextjs-seo",
    content:
      "SEO対策のためには、ページのメタデータを適切に設定することが重要です。\n\n" +
      "Next.jsでは、`next/head` を利用して各ページのタイトルやディスクリプションを動的に設定できます。\n" +
      "また、Open GraphやTwitterカードのメタタグを活用することで、SNSでのシェア時に最適な表示を行うことが可能です。\n\n" +
      "本記事では、SEOに効果的なメタタグの設定方法を紹介します。",
  },
  {
    id: 9,
    title: "サーバーサイドレンダリング（SSR）と静的サイト生成（SSG）",
    slug: "ssr-vs-ssg",
    content:
      "Next.jsでは、SSR（サーバーサイドレンダリング）とSSG（静的サイト生成）の両方をサポートしています。\n\n" +
      "SSRはリクエストごとにページを生成し、動的なコンテンツに適しています。\n" +
      "一方、SSGはビルド時に静的HTMLを生成し、ページの読み込み速度を向上させます。\n\n" +
      "本記事では、それぞれのメリット・デメリットを比較し、最適な選択肢を探ります。",
  },
];
